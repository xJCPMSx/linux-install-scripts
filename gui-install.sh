#!/bin/bash

# Interface Gr√°fica Unificada para Linux Install Scripts
# Vers√£o: 1.0-beta
# Data: 2025-09-28

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üñ•Ô∏è Linux Install Scripts - Interface Gr√°fica${NC}"
echo "============================================="

# Configurar vari√°veis de ambiente para corrigir transpar√™ncia
setup_environment() {
    # Configura√ß√µes para corrigir transpar√™ncia
    export GTK_THEME="Adwaita"
    export GTK_CSD="0"
    export GDK_BACKEND="x11"
    export GTK_IM_MODULE=""
    export QT_IM_MODULE=""
    export XMODIFIERS=""
    
    # Configura√ß√µes espec√≠ficas para KDE
    if [ -n "$KDE_FULL_SESSION" ] || [ "$XDG_CURRENT_DESKTOP" = "KDE" ]; then
        export QT_QPA_PLATFORM="xcb"
        export QT_AUTO_SCREEN_SCALE_FACTOR="1"
        export QT_SCALE_FACTOR="1"
    fi
}

# Fun√ß√£o para executar zenity com supress√£o de warnings
run_zenity() {
    local args=("$@")
    
    if [[ "${args[0]}" == "--info" ]]; then
        zenity "${args[@]}" --no-wrap --width=500 --height=300 2>/dev/null
    elif [[ "${args[0]}" == "--list" ]]; then
        zenity "${args[@]}" --no-wrap --width=600 --height=400 2>/dev/null
    elif [[ "${args[0]}" == "--question" ]]; then
        zenity "${args[@]}" --no-wrap --width=500 --height=300 2>/dev/null
    else
        zenity "${args[@]}" 2>/dev/null
    fi
}

# Fun√ß√£o para executar kdialog (alternativa para KDE)
run_kdialog() {
    kdialog "$@"
}

# Detectar ferramenta GUI dispon√≠vel
detect_gui_tool() {
    if command -v kdialog &> /dev/null && { [ -n "$KDE_FULL_SESSION" ] || [ "$XDG_CURRENT_DESKTOP" = "KDE" ]; }; then
        echo "kdialog"
    elif command -v zenity &> /dev/null; then
        echo "zenity"
    else
        echo "none"
    fi
}

# Instalar zenity se necess√°rio
install_zenity() {
    echo -e "${YELLOW}‚ö†Ô∏è Zenity n√£o encontrado. Instalando...${NC}"
    if command -v zypper &> /dev/null; then
        sudo zypper install -y zenity
    elif command -v apt &> /dev/null; then
        sudo apt install -y zenity
    else
        echo -e "${RED}‚ùå N√£o foi poss√≠vel instalar zenity automaticamente${NC}"
        return 1
    fi
}

# Fun√ß√£o para mostrar menu principal
show_main_menu() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        local choice
        choice=$(run_kdialog --title "Linux Install Scripts" \
            --menu "Selecione uma op√ß√£o:" \
            "1" "üöÄ Instala√ß√£o Autom√°tica" \
            "2" "üìã Listar Programas" \
            "3" "üóëÔ∏è Desinstalar Programas" \
            "4" "üíæ Backup/Restore" \
            "5" "üìä Estat√≠sticas" \
            "6" "‚ùì Ajuda" \
            "7" "üö™ Sair")
    else
        local choice
        choice=$(run_zenity --list \
            --title="Linux Install Scripts" \
            --text="Selecione uma op√ß√£o:" \
            --column="Op√ß√£o" \
            --column="Descri√ß√£o" \
            "1" "üöÄ Instala√ß√£o Autom√°tica" \
            "2" "üìã Listar Programas" \
            "3" "üóëÔ∏è Desinstalar Programas" \
            "4" "üíæ Backup/Restore" \
            "5" "üìä Estat√≠sticas" \
            "6" "‚ùì Ajuda" \
            "7" "üö™ Sair")
    fi
    
    echo "$choice"
}

# Fun√ß√£o para instala√ß√£o autom√°tica
install_programs() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        if run_kdialog --title "Instala√ß√£o Autom√°tica" \
            --yesno "Deseja executar a instala√ß√£o autom√°tica de todos os programas?\n\nIsso instalar√°:\n‚Ä¢ Navegadores (Chrome, Brave, Firefox)\n‚Ä¢ Editores (VSCode, Cursor)\n‚Ä¢ Ferramentas (AnyDesk, Spotify)\n‚Ä¢ Desenvolvimento (Java, Node.js)\n‚Ä¢ Jogos (Osu!)"; then
            
            run_kdialog --title "Executando Instala√ß√£o" \
                --msgbox "Executando instala√ß√£o autom√°tica...\n\nPor favor, aguarde enquanto os programas s√£o instalados."
            
            ./auto-install.sh
            
            run_kdialog --title "Instala√ß√£o Conclu√≠da" \
                --msgbox "‚úÖ Instala√ß√£o conclu√≠da com sucesso!\n\nTodos os programas foram instalados."
        fi
    else
        if run_zenity --question \
            --title="Instala√ß√£o Autom√°tica" \
            --text="Deseja executar a instala√ß√£o autom√°tica de todos os programas?\n\nIsso instalar√°:\n‚Ä¢ Navegadores (Chrome, Brave, Firefox)\n‚Ä¢ Editores (VSCode, Cursor)\n‚Ä¢ Ferramentas (AnyDesk, Spotify)\n‚Ä¢ Desenvolvimento (Java, Node.js)\n‚Ä¢ Jogos (Osu!)"; then
            
            run_zenity --info \
                --title="Executando Instala√ß√£o" \
                --text="Executando instala√ß√£o autom√°tica...\n\nPor favor, aguarde enquanto os programas s√£o instalados."
            
            ./auto-install.sh
            
            run_zenity --info \
                --title="Instala√ß√£o Conclu√≠da" \
                --text="‚úÖ Instala√ß√£o conclu√≠da com sucesso!\n\nTodos os programas foram instalados."
        fi
    fi
}

# Fun√ß√£o para listar programas
list_programs() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        local programs="üìã PROGRAMAS DISPON√çVEIS\n\n"
        programs+="üîß DESENVOLVIMENTO:\n"
        programs+="‚Ä¢ VSCode - Editor de c√≥digo\n"
        programs+="‚Ä¢ Cursor - Editor com IA\n"
        programs+="‚Ä¢ Java (OpenJDK) - Linguagem de programa√ß√£o\n"
        programs+="‚Ä¢ Node.js - Runtime JavaScript\n"
        programs+="‚Ä¢ Compiladores (GCC, G++, Make, CMake)\n\n"
        programs+="üåê NAVEGADORES:\n"
        programs+="‚Ä¢ Google Chrome\n"
        programs+="‚Ä¢ Brave Browser\n"
        programs+="‚Ä¢ Firefox\n\n"
        programs+="üéµ MULTIM√çDIA:\n"
        programs+="‚Ä¢ Spotify - Streaming de m√∫sica\n"
        programs+="‚Ä¢ Osu! - Jogo de ritmo\n\n"
        programs+="üõ†Ô∏è FERRAMENTAS:\n"
        programs+="‚Ä¢ AnyDesk - Acesso remoto\n"
        programs+="‚Ä¢ Docker e Docker Compose\n"
        programs+="‚Ä¢ yt-dlp - Download de v√≠deos\n"
        programs+="‚Ä¢ WireGuard - VPN\n"
        programs+="‚Ä¢ Depend√™ncias de desenvolvimento\n\n"
        programs+="üîç FERRAMENTAS OSINT:\n"
        programs+="‚Ä¢ Sherlock - Busca de username\n"
        programs+="‚Ä¢ theHarvester - Coleta de emails\n"
        programs+="‚Ä¢ Recon-ng - Framework de reconhecimento\n"
        programs+="‚Ä¢ SpiderFoot - Automa√ß√£o OSINT\n"
        programs+="‚Ä¢ GHunt - OSINT de contas Google\n"
        programs+="‚Ä¢ PhoneInfoga - OSINT de telefones\n"
        programs+="‚Ä¢ Maigret - Busca avan√ßada de username\n"
        programs+="‚Ä¢ Holehe - Verifica√ß√£o de email em 120+ sites\n\n"
        programs+="üõ°Ô∏è FERRAMENTAS DE SEGURAN√áA:\n"
        programs+="‚Ä¢ Nmap - Scanner de rede\n"
        programs+="‚Ä¢ Wireshark - An√°lise de tr√°fego\n"
        programs+="‚Ä¢ John - Quebrador de senhas\n"
        programs+="‚Ä¢ Hydra - Ataque de for√ßa bruta\n"
        programs+="‚Ä¢ Aircrack-ng - Seguran√ßa WiFi\n"
        programs+="‚Ä¢ Hashcat - Quebrador de hashes\n"
        programs+="‚Ä¢ SQLMap - Teste de SQL injection\n"
        programs+="‚Ä¢ Nikto - Scanner de vulnerabilidades\n"
        programs+="‚Ä¢ Gobuster - Fuzzing de diret√≥rios\n"
        programs+="‚Ä¢ ffuf - Fuzzing web\n\n"
        programs+="üéÆ PLATAFORMAS DE JOGOS:\n"
        programs+="‚Ä¢ Steam - Plataforma de jogos\n"
        programs+="‚Ä¢ Lutris - Gerenciador de jogos\n"
        programs+="‚Ä¢ Heroic Games Launcher - Epic Games & GOG\n"
        programs+="‚Ä¢ WinBoat - Emulador de Windows\n"
        programs+="‚Ä¢ Driver Oficial da Huion - Para tablets gr√°ficos"
        
        run_kdialog --title "Programas Dispon√≠veis" \
            --msgbox "$programs" \
            --geometry 600x500
    else
        # Para zenity, usar formato HTML para melhor formata√ß√£o
        local programs="<b>üìã Programas Dispon√≠veis</b>\n\n"
        programs+="<b>üîß Desenvolvimento:</b>\n"
        programs+="‚Ä¢ VSCode - Editor de c√≥digo\n"
        programs+="‚Ä¢ Cursor - Editor com IA\n"
        programs+="‚Ä¢ Java (OpenJDK) - Linguagem de programa√ß√£o\n"
        programs+="‚Ä¢ Node.js - Runtime JavaScript\n"
        programs+="‚Ä¢ Compiladores (GCC, G++, Make, CMake)\n\n"
        programs+="<b>üåê Navegadores:</b>\n"
        programs+="‚Ä¢ Google Chrome\n"
        programs+="‚Ä¢ Brave Browser\n"
        programs+="‚Ä¢ Firefox\n\n"
        programs+="<b>üéµ Multim√≠dia:</b>\n"
        programs+="‚Ä¢ Spotify - Streaming de m√∫sica\n"
        programs+="‚Ä¢ Osu! - Jogo de ritmo\n\n"
        programs+="<b>üõ†Ô∏è Ferramentas:</b>\n"
        programs+="‚Ä¢ AnyDesk - Acesso remoto\n"
        programs+="‚Ä¢ Docker e Docker Compose\n"
        programs+="‚Ä¢ yt-dlp - Download de v√≠deos\n"
        programs+="‚Ä¢ WireGuard - VPN\n"
        programs+="‚Ä¢ Depend√™ncias de desenvolvimento\n\n"
        programs+="<b>üîç Ferramentas OSINT:</b>\n"
        programs+="‚Ä¢ Sherlock - Busca de username\n"
        programs+="‚Ä¢ theHarvester - Coleta de emails\n"
        programs+="‚Ä¢ Recon-ng - Framework de reconhecimento\n"
        programs+="‚Ä¢ SpiderFoot - Automa√ß√£o OSINT\n"
        programs+="‚Ä¢ GHunt - OSINT de contas Google\n"
        programs+="‚Ä¢ PhoneInfoga - OSINT de telefones\n"
        programs+="‚Ä¢ Maigret - Busca avan√ßada de username\n"
        programs+="‚Ä¢ Holehe - Verifica√ß√£o de email em 120+ sites\n\n"
        programs+="<b>üõ°Ô∏è Ferramentas de Seguran√ßa:</b>\n"
        programs+="‚Ä¢ Nmap - Scanner de rede\n"
        programs+="‚Ä¢ Wireshark - An√°lise de tr√°fego\n"
        programs+="‚Ä¢ John - Quebrador de senhas\n"
        programs+="‚Ä¢ Hydra - Ataque de for√ßa bruta\n"
        programs+="‚Ä¢ Aircrack-ng - Seguran√ßa WiFi\n"
        programs+="‚Ä¢ Hashcat - Quebrador de hashes\n"
        programs+="‚Ä¢ SQLMap - Teste de SQL injection\n"
        programs+="‚Ä¢ Nikto - Scanner de vulnerabilidades\n"
        programs+="‚Ä¢ Gobuster - Fuzzing de diret√≥rios\n"
        programs+="‚Ä¢ ffuf - Fuzzing web\n\n"
        programs+="<b>üéÆ Plataformas de Jogos:</b>\n"
        programs+="‚Ä¢ Steam - Plataforma de jogos\n"
        programs+="‚Ä¢ Lutris - Gerenciador de jogos\n"
        programs+="‚Ä¢ Heroic Games Launcher - Epic Games & GOG\n"
        programs+="‚Ä¢ WinBoat - Emulador de Windows\n"
        programs+="‚Ä¢ Driver Oficial da Huion - Para tablets gr√°ficos"
        
        run_zenity --info \
            --title="Programas Dispon√≠veis" \
            --text="$programs" \
            --width=700 \
            --height=600
    fi
}

# Fun√ß√£o para desinstalar programas
uninstall_programs() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        if run_kdialog --title "Desinstalar Programas" \
            --yesno "Deseja executar o script de desinstala√ß√£o?\n\nIsso remover√° todos os programas instalados pelo script."; then
            
            run_kdialog --title "Desinstala√ß√£o" \
                --msgbox "Executando script de desinstala√ß√£o..."
            
            ./uninstall.sh
            
            run_kdialog --title "Desinstala√ß√£o Conclu√≠da" \
                --msgbox "‚úÖ Desinstala√ß√£o conclu√≠da com sucesso!"
        fi
    else
        if run_zenity --question \
            --title="Desinstalar Programas" \
            --text="Deseja executar o script de desinstala√ß√£o?\n\nIsso remover√° todos os programas instalados pelo script."; then
            
            run_zenity --info \
                --title="Desinstala√ß√£o" \
                --text="Executando script de desinstala√ß√£o..."
            
            ./uninstall.sh
            
            run_zenity --info \
                --title="Desinstala√ß√£o Conclu√≠da" \
                --text="‚úÖ Desinstala√ß√£o conclu√≠da com sucesso!"
        fi
    fi
}

# Fun√ß√£o para backup
backup_menu() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        local backup_choice
        backup_choice=$(run_kdialog --title "Backup/Restore" \
            --menu "Selecione uma op√ß√£o de backup:" \
            "1" "üíæ Criar Backup" \
            "2" "üìã Listar Backups" \
            "3" "üìä Estat√≠sticas")
    else
        local backup_choice
        backup_choice=$(run_zenity --list \
            --title="Backup/Restore" \
            --text="Selecione uma op√ß√£o de backup:" \
            --column="Op√ß√£o" \
            --column="Descri√ß√£o" \
            "1" "üíæ Criar Backup" \
            "2" "üìã Listar Backups" \
            "3" "üìä Estat√≠sticas")
    fi
    
    case "$backup_choice" in
        "1")
            if [ "$gui_tool" = "kdialog" ]; then
                run_kdialog --title "Criando Backup" \
                    --msgbox "Criando backup do sistema..."
            else
                run_zenity --info \
                    --title="Criando Backup" \
                    --text="Criando backup do sistema..."
            fi
            ./backup/backup.sh create
            if [ "$gui_tool" = "kdialog" ]; then
                run_kdialog --title "Backup Conclu√≠do" \
                    --msgbox "‚úÖ Backup criado com sucesso!"
            else
                run_zenity --info \
                    --title="Backup Conclu√≠do" \
                    --text="‚úÖ Backup criado com sucesso!"
            fi
            ;;
        "2")
            ./backup/backup.sh list
            ;;
        "3")
            ./backup/backup.sh stats
            ;;
    esac
}

# Fun√ß√£o para mostrar estat√≠sticas
show_statistics() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        local stats="üìä ESTAT√çSTICAS DO SISTEMA\n\n"
        stats+="üñ•Ô∏è SISTEMA:\n"
        if command -v lsb_release &> /dev/null; then
            stats+="‚Ä¢ Distribui√ß√£o: $(lsb_release -d | cut -f2)\n"
        else
            stats+="‚Ä¢ Sistema: $(uname -s) $(uname -r)\n"
        fi
        stats+="‚Ä¢ Kernel: $(uname -r)\n"
        stats+="‚Ä¢ Usu√°rio: $USER\n\n"
        stats+="üíæ ESPA√áO EM DISCO:\n"
        stats+="‚Ä¢ $(df -h / | tail -1 | awk '{print $4}') dispon√≠vel\n\n"
        stats+="üß† MEM√ìRIA:\n"
        stats+="‚Ä¢ $(free -h | grep Mem | awk '{print $7}') dispon√≠vel\n\n"
        stats+="üì¶ PROGRAMAS INSTALADOS:\n"
        if command -v zypper &> /dev/null; then
            stats+="‚Ä¢ $(zypper packages --installed-only | wc -l) pacotes (Zypper)\n"
        fi
        if command -v flatpak &> /dev/null; then
            stats+="‚Ä¢ $(flatpak list | wc -l) aplicativos (Flatpak)\n"
        fi
        
        run_kdialog --title "Estat√≠sticas do Sistema" \
            --msgbox "$stats" \
            --geometry 600x500
    else
        local stats="<b>üìä Estat√≠sticas do Sistema</b>\n\n"
        stats+="<b>üñ•Ô∏è Sistema:</b>\n"
        if command -v lsb_release &> /dev/null; then
            stats+="‚Ä¢ Distribui√ß√£o: $(lsb_release -d | cut -f2)\n"
        else
            stats+="‚Ä¢ Sistema: $(uname -s) $(uname -r)\n"
        fi
        stats+="‚Ä¢ Kernel: $(uname -r)\n"
        stats+="‚Ä¢ Usu√°rio: $USER\n\n"
        stats+="<b>üíæ Espa√ßo em Disco:</b>\n"
        stats+="‚Ä¢ $(df -h / | tail -1 | awk '{print $4}') dispon√≠vel\n\n"
        stats+="<b>üß† Mem√≥ria:</b>\n"
        stats+="‚Ä¢ $(free -h | grep Mem | awk '{print $7}') dispon√≠vel\n\n"
        stats+="<b>üì¶ Programas Instalados:</b>\n"
        if command -v zypper &> /dev/null; then
            stats+="‚Ä¢ $(zypper packages --installed-only | wc -l) pacotes (Zypper)\n"
        fi
        if command -v flatpak &> /dev/null; then
            stats+="‚Ä¢ $(flatpak list | wc -l) aplicativos (Flatpak)\n"
        fi
        
        run_zenity --info \
            --title="Estat√≠sticas do Sistema" \
            --text="$stats" \
            --width=700 \
            --height=600
    fi
}

# Fun√ß√£o para mostrar ajuda
show_help() {
    local gui_tool="$1"
    
    if [ "$gui_tool" = "kdialog" ]; then
        local help_text="‚ùì AJUDA - LINUX INSTALL SCRIPTS\n\n"
        help_text+="üöÄ INSTALA√á√ÉO AUTOM√ÅTICA:\n"
        help_text+="Selecione a op√ß√£o 1 para instalar todos os programas.\n\n"
        help_text+="üìã LISTAR PROGRAMAS:\n"
        help_text+="Veja todos os programas dispon√≠veis para instala√ß√£o.\n\n"
        help_text+="üóëÔ∏è DESINSTALAR:\n"
        help_text+="Remove todos os programas instalados pelo script.\n\n"
        help_text+="üíæ BACKUP:\n"
        help_text+="Crie backups antes de grandes mudan√ßas.\n\n"
        help_text+="üìä ESTAT√çSTICAS:\n"
        help_text+="Veja informa√ß√µes do sistema e programas instalados.\n\n"
        help_text+="üîó SUPORTE:\n"
        help_text+="‚Ä¢ Reposit√≥rio: https://github.com/xJCPMSx/linux-install-scripts\n"
        help_text+="‚Ä¢ Issues: https://github.com/xJCPMSx/linux-install-scripts/issues\n"
        help_text+="‚Ä¢ Documenta√ß√£o: README.md"
        
        run_kdialog --title "Ajuda" \
            --msgbox "$help_text" \
            --geometry 700x600
    else
        local help_text="<b>‚ùì Ajuda - Linux Install Scripts</b>\n\n"
        help_text+="<b>üöÄ Instala√ß√£o Autom√°tica:</b>\n"
        help_text+="Selecione a op√ß√£o 1 para instalar todos os programas.\n\n"
        help_text+="<b>üìã Listar Programas:</b>\n"
        help_text+="Veja todos os programas dispon√≠veis para instala√ß√£o.\n\n"
        help_text+="<b>üóëÔ∏è Desinstalar:</b>\n"
        help_text+="Remove todos os programas instalados pelo script.\n\n"
        help_text+="<b>üíæ Backup:</b>\n"
        help_text+="Crie backups antes de grandes mudan√ßas.\n\n"
        help_text+="<b>üìä Estat√≠sticas:</b>\n"
        help_text+="Veja informa√ß√µes do sistema e programas instalados.\n\n"
        help_text+="<b>üîó Suporte:</b>\n"
        help_text+="‚Ä¢ Reposit√≥rio: https://github.com/xJCPMSx/linux-install-scripts\n"
        help_text+="‚Ä¢ Issues: https://github.com/xJCPMSx/linux-install-scripts/issues\n"
        help_text+="‚Ä¢ Documenta√ß√£o: README.md"
        
        run_zenity --info \
            --title="Ajuda" \
            --text="$help_text" \
            --width=800 \
            --height=700
    fi
}

# Fun√ß√£o principal
main() {
    # Verificar se est√° em modo gr√°fico
    if [ -z "$DISPLAY" ]; then
        echo -e "${RED}‚ùå Erro: Interface gr√°fica n√£o dispon√≠vel${NC}"
        echo "Execute em um ambiente gr√°fico ou use os scripts de linha de comando:"
        echo "  ./auto-install.sh    - Instala√ß√£o autom√°tica"
        echo "  ./uninstall.sh       - Desinstala√ß√£o"
        exit 1
    fi
    
    # Configurar ambiente
    setup_environment
    
    # Detectar ferramenta GUI
    local gui_tool
    gui_tool=$(detect_gui_tool)
    
    if [ "$gui_tool" = "none" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è Nenhuma ferramenta GUI encontrada. Tentando instalar zenity...${NC}"
        if install_zenity; then
            gui_tool="zenity"
        else
            echo -e "${RED}‚ùå N√£o foi poss√≠vel instalar ferramenta GUI${NC}"
            echo "Por favor, instale zenity ou kdialog manualmente:"
            echo "  openSUSE: sudo zypper install zenity"
            echo "  Debian/Ubuntu: sudo apt install zenity"
            exit 1
        fi
    fi
    
    echo -e "${GREEN}‚úÖ Usando $gui_tool para interface gr√°fica${NC}"
    
    # Loop principal do menu
    while true; do
        local choice
        choice=$(show_main_menu "$gui_tool")
        
        case "$choice" in
            "1")
                install_programs "$gui_tool"
                ;;
            "2")
                list_programs "$gui_tool"
                ;;
            "3")
                uninstall_programs "$gui_tool"
                ;;
            "4")
                backup_menu "$gui_tool"
                ;;
            "5")
                show_statistics "$gui_tool"
                ;;
            "6")
                show_help "$gui_tool"
                ;;
            "7")
                if [ "$gui_tool" = "kdialog" ]; then
                    run_kdialog --title "Saindo" \
                        --msgbox "Obrigado por usar Linux Install Scripts!"
                else
                    run_zenity --info \
                        --title="Saindo" \
                        --text="Obrigado por usar Linux Install Scripts!"
                fi
                exit 0
                ;;
            *)
                exit 0
                ;;
        esac
    done
}

# Executar fun√ß√£o principal
main "$@"
