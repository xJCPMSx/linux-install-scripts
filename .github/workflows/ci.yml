# CI/CD Pipeline para Linux Install Scripts
# Versão: 1.0-beta
# Data: 2025-09-28

name: Linux Install Scripts CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # Job de testes
  test:
    name: Testes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        shell: [bash, zsh]
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar ambiente
      run: |
        echo "Configurando ambiente de teste..."
        sudo apt-get update
        sudo apt-get install -y shellcheck bash-completion
    
    - name: Testar sintaxe dos scripts
      run: |
        echo "Testando sintaxe dos scripts..."
        shellcheck auto-install.sh
        shellcheck uninstall.sh
        shellcheck opensuse/install-programs.sh
        shellcheck debian/install-programs-debian.sh
        shellcheck gui/gui-install.sh
        shellcheck backup/backup.sh
        shellcheck logs/logger.sh
    
    - name: Testar detecção de distribuição
      run: |
        echo "Testando detecção de distribuição..."
        ./auto-install.sh --test-detect
    
    - name: Testar validação de configuração
      run: |
        echo "Testando validação de configuração..."
        if [ -f "config/config.conf" ]; then
          echo "Arquivo de configuração encontrado"
        else
          echo "Arquivo de configuração não encontrado"
          exit 1
        fi

  # Job de build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        echo "Construindo imagem Docker..."
        docker build -t linux-install-scripts:latest -f docker/Dockerfile .
    
    - name: Testar imagem Docker
      run: |
        echo "Testando imagem Docker..."
        docker run --rm linux-install-scripts:latest /bin/bash -c "echo 'Docker image funcionando'"
    
    - name: Build com Docker Compose
      run: |
        echo "Testando Docker Compose..."
        cd docker
        docker-compose build

  # Job de deploy
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Configurar Git
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
    
    - name: Atualizar documentação
      run: |
        echo "Atualizando documentação..."
        # Atualizar README com informações de CI/CD
        echo "✅ CI/CD configurado com sucesso" >> README.md
    
    - name: Criar release
      if: github.event_name == 'release'
      run: |
        echo "Criando release..."
        # Lógica para criar release automático

  # Job de qualidade de código
  quality:
    name: Qualidade de Código
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Instalar ferramentas de qualidade
      run: |
        echo "Instalando ferramentas de qualidade..."
        sudo apt-get update
        sudo apt-get install -y shellcheck bash-completion
    
    - name: Análise de código
      run: |
        echo "Analisando qualidade do código..."
        find . -name "*.sh" -exec shellcheck {} \;
    
    - name: Verificar formatação
      run: |
        echo "Verificando formatação..."
        # Verificar se os scripts estão formatados corretamente
        for file in *.sh */*.sh; do
          if [ -f "$file" ]; then
            echo "Verificando: $file"
          fi
        done

  # Job de segurança
  security:
    name: Segurança
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Verificar permissões
      run: |
        echo "Verificando permissões dos scripts..."
        find . -name "*.sh" -exec ls -la {} \;
    
    - name: Verificar comandos perigosos
      run: |
        echo "Verificando comandos perigosos..."
        grep -r "rm -rf" . || echo "Nenhum comando perigoso encontrado"
        grep -r "sudo" . || echo "Nenhum uso de sudo encontrado"

  # Job de documentação
  documentation:
    name: Documentação
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout código
      uses: actions/checkout@v4
    
    - name: Verificar documentação
      run: |
        echo "Verificando documentação..."
        if [ -f "README.md" ]; then
          echo "✅ README.md encontrado"
        else
          echo "❌ README.md não encontrado"
          exit 1
        fi
        
        if [ -f "CHANGELOG.md" ]; then
          echo "✅ CHANGELOG.md encontrado"
        else
          echo "❌ CHANGELOG.md não encontrado"
          exit 1
        fi
    
    - name: Gerar documentação
      run: |
        echo "Gerando documentação..."
        # Gerar documentação automática se necessário