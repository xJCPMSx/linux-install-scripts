name: CI/CD - Linux Installation Scripts

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  # Teste de sintaxe dos scripts
  syntax-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Verificar sintaxe dos scripts
      run: |
        echo "🔍 Verificando sintaxe dos scripts..."
        find . -name "*.sh" -exec bash -n {} \;
        echo "✅ Sintaxe dos scripts verificada"
    
    - name: Verificar permissões
      run: |
        echo "🔍 Verificando permissões dos scripts..."
        find . -name "*.sh" -exec test -x {} \; || (echo "❌ Scripts não executáveis" && exit 1)
        echo "✅ Permissões dos scripts verificadas"

  # Teste em openSUSE
  test-opensuse:
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed:latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Instalar dependências
      run: |
        zypper refresh
        zypper install -y curl wget git sudo tar unzip gnupg
    
    - name: Executar script openSUSE
      run: |
        chmod +x opensuse/install-programs.sh
        ./opensuse/install-programs.sh
    
    - name: Verificar instalações
      run: |
        echo "🔍 Verificando instalações..."
        which gcc && echo "✅ GCC instalado"
        which java && echo "✅ Java instalado"
        which node && echo "✅ Node.js instalado"
        which git && echo "✅ Git instalado"

  # Teste em Debian
  test-debian:
    runs-on: ubuntu-latest
    container:
      image: debian:bookworm-slim
    steps:
    - uses: actions/checkout@v4
    
    - name: Instalar dependências
      run: |
        apt-get update
        apt-get install -y curl wget git sudo tar unzip gnupg software-properties-common apt-transport-https ca-certificates lsb-release
    
    - name: Executar script Debian
      run: |
        chmod +x debian/install-programs-debian.sh
        ./debian/install-programs-debian.sh
    
    - name: Verificar instalações
      run: |
        echo "🔍 Verificando instalações..."
        which gcc && echo "✅ GCC instalado"
        which java && echo "✅ Java instalado"
        which node && echo "✅ Node.js instalado"
        which git && echo "✅ Git instalado"

  # Teste em Ubuntu
  test-ubuntu:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Instalar dependências
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget git tar unzip gnupg software-properties-common apt-transport-https ca-certificates lsb-release
    
    - name: Executar script Debian
      run: |
        chmod +x debian/install-programs-debian.sh
        ./debian/install-programs-debian.sh
    
    - name: Verificar instalações
      run: |
        echo "🔍 Verificando instalações..."
        which gcc && echo "✅ GCC instalado"
        which java && echo "✅ Java instalado"
        which node && echo "✅ Node.js instalado"
        which git && echo "✅ Git instalado"

  # Teste de Docker
  test-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Construir imagem Docker
      run: |
        docker build -t linux-install-scripts .
    
    - name: Testar container
      run: |
        docker run --rm linux-install-scripts /bin/bash -c "echo '✅ Container funcionando'"
    
    - name: Testar docker-compose
      run: |
        docker-compose up --build -d
        sleep 30
        docker-compose down

  # Teste de desinstalação
  test-uninstall:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Instalar dependências
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget git tar unzip gnupg software-properties-common apt-transport-https ca-certificates lsb-release
    
    - name: Executar instalação
      run: |
        chmod +x debian/install-programs-debian.sh
        ./debian/install-programs-debian.sh
    
    - name: Executar desinstalação
      run: |
        chmod +x uninstall.sh
        ./uninstall.sh
    
    - name: Verificar desinstalação
      run: |
        echo "🔍 Verificando desinstalação..."
        ! which gcc || echo "❌ GCC ainda instalado"
        ! which java || echo "❌ Java ainda instalado"
        ! which node || echo "❌ Node.js ainda instalado"
        ! which git || echo "❌ Git ainda instalado"

  # Teste de interface gráfica
  test-gui:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Testar GUI
      run: |
        chmod +x gui-install.sh
        echo "18" | ./gui-install.sh || echo "✅ GUI testada"

  # Teste de backup
  test-backup:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Testar backup
      run: |
        chmod +x backup.sh
        ./backup.sh
    
    - name: Verificar backup
      run: |
        ls -la ~/.linux-install-scripts/backup/
        echo "✅ Backup testado"

  # Teste de logs
  test-logs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Testar sistema de logs
      run: |
        chmod +x logger.sh
        source logger.sh
        log "INFO" "Teste de log"
        log "ERROR" "Teste de erro"
        log "DEBUG" "Teste de debug"
    
    - name: Verificar logs
      run: |
        ls -la ~/.linux-install-scripts/logs/
        echo "✅ Sistema de logs testado"

  # Geração de relatório
  generate-report:
    runs-on: ubuntu-latest
    needs: [syntax-check, test-opensuse, test-debian, test-ubuntu, test-docker, test-uninstall, test-gui, test-backup, test-logs]
    if: always()
    steps:
    - uses: actions/checkout@v4
    
    - name: Gerar relatório
      run: |
        echo "# Relatório de Testes - Linux Installation Scripts" > test-report.md
        echo "Data: $(date)" >> test-report.md
        echo "Commit: ${{ github.sha }}" >> test-report.md
        echo "" >> test-report.md
        echo "## Status dos Testes" >> test-report.md
        echo "- Sintaxe: ${{ needs.syntax-check.result }}" >> test-report.md
        echo "- openSUSE: ${{ needs.test-opensuse.result }}" >> test-report.md
        echo "- Debian: ${{ needs.test-debian.result }}" >> test-report.md
        echo "- Ubuntu: ${{ needs.test-ubuntu.result }}" >> test-report.md
        echo "- Docker: ${{ needs.test-docker.result }}" >> test-report.md
        echo "- Desinstalação: ${{ needs.test-uninstall.result }}" >> test-report.md
        echo "- GUI: ${{ needs.test-gui.result }}" >> test-report.md
        echo "- Backup: ${{ needs.test-backup.result }}" >> test-report.md
        echo "- Logs: ${{ needs.test-logs.result }}" >> test-report.md
    
    - name: Upload relatório
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: test-report.md

  # Deploy (apenas em release)
  deploy:
    runs-on: ubuntu-latest
    needs: [syntax-check, test-opensuse, test-debian, test-ubuntu, test-docker, test-uninstall, test-gui, test-backup, test-logs]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Criar release
      run: |
        echo "🚀 Criando release ${{ github.event.release.tag_name }}"
        echo "✅ Todos os testes passaram"
        echo "📦 Scripts prontos para distribuição"
